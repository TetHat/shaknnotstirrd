////
// Hamburger Mixins
//
// These were pulled from https://jonsuh.com/hamburgers/
// But ported into mixins so I could change values responsively
// Props to Jon Suh for the super simple to use hamburger package
////
@mixin hamburger(
        $hamburger-padding-y: 15px,
        $hamburger-padding-x: 15px,
        $hamburger-hover-transition-duration: .15s,
        $hamburger-hover-transition-timing-function: linear,
        $hamburger-hover-use-filter: false,
        $hamburger-hover-filter: opacity(50%),
        $hamburger-hover-opacity: .7,
        $hamburger-layer-width: 40px,
        $hamburger-layer-height: 4px,
        $hamburger-layer-spacing: 6px,
        $hamburger-layer-color: #000,
        $hamburger-layer-border-radius: 4px
      ) {
  .hamburger {
    background-color: transparent;
    border: 0;
    color: inherit;
    cursor: pointer;
    display: inline-block;
    font: inherit;
    margin: 0;
    overflow: visible;
    padding: $hamburger-padding-y $hamburger-padding-x;
    text-transform: none;
    transition-duration: $hamburger-hover-transition-duration;
    transition-property: opacity, filter;
    transition-timing-function: $hamburger-hover-transition-timing-function;
  } // .hamburger

  &:hover {
    @if $hamburger-hover-use-filter == true {
      filter: $hamburger-hover-filter;
    } @else {
      opacity: $hamburger-hover-opacity;
    } // @if/else
  } // &:hover

  .hamburger-box {
    display: inline-block;
    height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
    position: relative;
    transition: height .5s ease;
    width: $hamburger-layer-width;
  } // .hamburger-box

  .hamburger-inner {
    display: block;
    margin-top: $hamburger-layer-height / -2;
    top: 50%;

    &,
    &::before,
    &::after {
      background-color: $hamburger-layer-color;
      border-radius: $hamburger-layer-border-radius;
      height: $hamburger-layer-height;
      position: absolute;
      transition-duration: 0.15s;
      transition-property: transform;
      transition-timing-function: ease;
      width: $hamburger-layer-width;
    } // &, &::before, &::after

    &::before,
    &::after {
      content: '';
      display: block;
    } // &::before, &::after

    &::before {
      top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    } // &::before

    &::after {
      bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    } // &::after
  } // .hamburger-inner
} // @mixin hamburger

@mixin spin() {
  .hamburger--spin {
    .hamburger-inner {
      transition-duration: 0.22s;
      transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);

      &::before {
        transition: top 0.1s 0.25s ease-in,
                    opacity 0.1s ease-in;
      } // &::before

      &::after {
        transition: bottom 0.1s 0.25s ease-in,
                    transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);
      } // &::after
    } // .hamburger-inner

    &.is-active {
      .hamburger-inner {
        transform: rotate(225deg);
        transition-delay: 0.12s;
        transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);

        &::before {
          opacity: 0;
          top: 0;
          transition: top 0.1s ease-out,
                      opacity 0.1s 0.12s ease-out;
        } // &::before

        &::after {
          bottom: 0;
          transform: rotate(-90deg);
          transition: bottom 0.1s ease-out,
                      transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);
        } // &::after
      } // .hamburger-inner
    } // &.is-active
  } // .hamburger--spin
} // @mixin spin

